name: Build

on:
  # For default branch, wait for the "Docker Build" workflow instead so that
  # we will run this against the latest image.
  push:
    branches-ignore:
      - 'trunk'
  pull_request:

  workflow_run:
    workflows: ["Docker Build"]
    branches:
      - trunk
    types:
      - completed

jobs:
  Compile-Toolchain-Debian:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # We first compare the default branch to the event commit. In case this is
      # the default branch, this should return 0, skipping the build and using
      # the latest image from "Docker Build"
      - name: Compare files to default branch
        uses: ./.github/actions/path-diff
        id: path_diff
        with:
          base: ${{ format('refs/remotes/origin/{0}', github.event.repository.default_branch) }}
          head: ${{ github.sha }}
          paths: ${{ github.workspace }}/tools/build-toolchain.sh


      # Build the toolchain if toolchain files changed w.r.t default which is
      - name: Build Toolchain Debian
        if: ${{ steps.path_diff.outputs.changed == 1 }}
        run: |
          # install required dependencies
          sudo apt-get install -yq wget bzip2 gcc g++ make file libmpfr-dev libmpc-dev zlib1g-dev texinfo git gcc-multilib

          # set N64INST to a local directory so we can make it into an install package?
          # export N64_INST=${{ github.workspace }}/lib-dragon64/binaries
          
          mkdir -p build/toolchain/linux
          cp ./tools/build-toolchain.sh ./build/toolchain/linux/build-toolchain.sh

          cd ./build/toolchain/linux
          sudo ./build-toolchain.sh

      # - name: Create-Debian-Package
      #   run: |
      #     echo "Trying to create debian package! - ref: https://gist.github.com/deanrather/6016390"

      #     mkdir -p lib-dragon64/DEBIAN
      #     cd ${{ github.workspace }}/lib-dragon64/DEBIAN
      #     cat > control << EOF
      #     Package: lib-dragon64-install
      #     Version: 0.0-1
      #     Architecture: all
      #     Maintainer: lib-dragon64 contributers
      #     Description: Install Package
      #     This package tests running an autogenerated CI package.
      #     EOF

      #     cat > postinst << EOF
      #     #!/bin/bash
      #     ./install.sh
      #     EOF

      #     cd ../../
      #     # test install (locally)
      #     #sudo dpkg -i lib-dragon64.deb


      # publish package toolchain artifacts:
      # TODO: might not be the best place!
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: "toolchain-linux"
          path: /usr/local/**/* #${{ github.workspace }}/**/lib-dragon64/binaries/**/* #"libdragon-gcc-toolchain-mips64-win64.zip"

  Compile-Toolchain-Windows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # We first compare the default branch to the event commit. In case this is
      # the default branch, this should return 0, skipping the build and using
      # the latest image from "Docker Build"
      - name: Compare files to default branch
        uses: ./.github/actions/path-diff
        id: path_diff
        with:
          base: ${{ format('refs/remotes/origin/{0}', github.event.repository.default_branch) }}
          head: ${{ github.sha }}
          paths: ${{ github.workspace }}/tools/build-toolchain.sh

      # Build the toolchain if toolchain files changed w.r.t default which is
      - name: Build x86_64 Toolchain
        if: ${{ steps.path_diff.outputs.changed == 1 }}
        run: |
          # Install required dependencies
          sudo apt-get install -yq wget bzip2 gcc g++ make file libmpfr-dev libmpc-dev zlib1g-dev texinfo git gcc-multilib
          # Install Windows cross compile specific dependencies
          sudo apt-get install -yq mingw-w64 libz-mingw-w64-dev autoconf autoconf-archive

          mkdir -p build/toolchain/windows-x86_64
          cp ./tools/build-toolchain.sh ./build/toolchain/windows-x86_64/build-toolchain.sh

          cd ./build/toolchain/windows-x86_64
          sudo ./build-toolchain.sh  x86_64-w64-mingw32

          # cd ${{ github.workspace }}
          # make && make install

      - name: Upload Toolchain Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "windows-x86_64-toolchain"
          path: ${{ github.workspace }}/**/binaries/**/*

  Compile-Test-Example-Roms-Docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # We first compare the default branch to the event commit. In case this is
      # the default branch, this should return 0, skipping the build and using
      # the latest image from "Docker Build"
      - name: Compare files to default branch
        uses: ./.github/actions/path-diff
        id: path_diff
        with:
          base: ${{ format('refs/remotes/origin/{0}', github.event.repository.default_branch) }}
          head: ${{ github.sha }}

      # Build the toolchain if toolchain files changed w.r.t default which is
      # where we release the images and we can use from registry o/w
      - name: Set up Docker Build
        if: ${{ steps.path_diff.outputs.changed == 1 }}
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        if: ${{ steps.path_diff.outputs.changed == 1 }}
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{GITHUB_REPOSITORY_LOWERCASE}}/libdragon

      - name: Build image
        if: ${{ steps.path_diff.outputs.changed == 1 }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha

      # Export in the environment the Docker tag that will be used for building
      # libdragon. We use the image we last built if the toolchain has changed,
      # or reuse the latest image (from trunk build) if changed.
      - name: Export image tag (current branch)
        if: ${{ steps.path_diff.outputs.changed == 1 }}
        run: |
          echo "DOCKER_TAG=${{ steps.meta.outputs.tags }}" >>${GITHUB_ENV}
      - name: Export image tag (latest)
        if: ${{ steps.path_diff.outputs.changed == 0 }}
        run: |
          echo "DOCKER_TAG=latest" >>${GITHUB_ENV}

      # As we have a tagged image now, we can use that to run build.sh
      # if it is built in the previous step. o/w it will be downloaded from the
      # registry. Then verify everything is building properly
      - name: Build libdragon
        run: |
          docker run \
          --mount type=bind,source=$(pwd),target=/libdragon \
          --workdir=/libdragon \
          ghcr.io/${GITHUB_REPOSITORY_LOWERCASE}/libdragon:${DOCKER_TAG} \
          ./build.sh

  Compile-Tools-Windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
       include: [
         { sys: mingw64, arch: x86_64, build: tools} #,
         # { sys: mingw32, arch: i686,   build: tools} # i686 tools are of limited use Uncomment if needed.
       ]
    steps:
     - uses: msys2/setup-msys2@v2
       with:
         msystem: ${{matrix.sys}}
         install: >-
           mingw-w64-${{ matrix.arch }}-libpng
           base-devel
           mingw-w64-${{ matrix.arch }}-toolchain
         update: true

     - uses: actions/checkout@v2
       with:
         fetch-depth: 0

     - name: Correct MSYS2 pthread.h to allow static libraries (otherwise you would need to use a lib DLL, rather than it being built into the EXE.)
       shell: msys2 {0}
       run: |
         sed -z 's/#else\n#define WINPTHREAD_API __declspec(dllimport)/#else\n#define WINPTHREAD_API/' /${{matrix.sys}}/${{ matrix.arch }}-w64-mingw32/include/pthread.h

     - name: Build ${{ matrix.build }} tools
       shell: msys2 {0}
       run: |
         make ${{ matrix.build }}

     - name: "Upload ${{ matrix.build }} tools"
       uses: actions/upload-artifact@v2
       with:
         name: windows-${{ matrix.arch }}-${{ matrix.build }}
         path: ${{ github.workspace }}/**/tools/**/*.exe

